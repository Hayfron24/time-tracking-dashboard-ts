// Generated by https://quicktype.io

interface Data {
    title: string;
    timeframes: Timeframes;
}

interface Timeframes {
    daily: Daily;
    weekly: Weekly;
    monthly: Monthly;
}

interface Daily {
    current: number;
    previous: number;
    previousTimeframe: string;
}

interface Weekly {
    current: number;
    previous: number;
    previousTimeframe: string;
}

interface Monthly {
    current: number;
    previous: number;
    previousTimeframe: string;
}

const buttons: NodeListOf<HTMLButtonElement> = document.querySelectorAll('.btn');



const url: string = 'data.json';

// ...

// ...

const displayData: Function = (timeframe: string) => {
  fetch(url)
    .then(response => {
      // Check if the response status is in the range 200-299 (success)
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      // Parse the JSON in the response
      return response.json();
    })
    .then((data: Data) => {
      const newData = Object.values(data);
      // console.log(data);
      

      const cardsContainer = document.querySelector('.cards') as HTMLDivElement;
      cardsContainer.innerHTML = ''; // Clear previous content

      newData.forEach((element) => {
        const card = document.createElement('div');
        card.className = 'card';
        card.innerHTML = `<div class="inner-card">
            <div class="status">
                <p>${element.title}</p>
                <i class="fa fa-ellipsis-h" aria-hidden="true"></i>
            </div>
            <div class="time">
                <h2>${element.timeframes[timeframe].current}hrs</h2>
                <p>${element.timeframes[timeframe].previousTimeframe} - ${element.timeframes[timeframe].previous}hrs</p>
            </div>
        </div>`;
        cardsContainer.appendChild(card);
      });
    })
    .catch(error => {
      // Handle errors during the fetch or JSON parsing
      console.error('Fetch error:', error);
    });
}

buttons.forEach(button => {
  button.addEventListener('click', () => {
    displayData(button.id.replace('-btn', ''));
    buttons.forEach(b => {
      b.classList.remove('active');
    });
    button.classList.add('active');
  });
});


buttons.forEach(button => {
  button.addEventListener('click', () => {
    displayData(button.id.replace('-btn', ''));
    buttons.forEach(b => {
      b.classList.remove('active');
    });
    button.classList.add('active');
  });
});


// const text: HTMLCollectionBase = document.querySelectorAll('h1');

// const newText: Element[] = Array.from(text);

// newText.forEach(element => {
//   element.innerHTML = '<h1>' + element.innerHTML + '</h1>';
// });

// console.log(text);
// const elements = document.querySelectorAll('.inner-card');
// const elementsArray = Array.from(elements);


// Using .map
// const elementsModifiedArray = elementsArray.map((element) => {
//   // Do something with each element
//   // console.log(`Element at index :`, element.innerHTML += `<h1>nice</h1>`);
//   return element; // You can modify the element or create a new array with modifications
// });
